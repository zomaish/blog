

// Generated by Akka gRPC. DO NOT EDIT.
package example.myapp.helloworld.grpc

import scala.concurrent.{ ExecutionContext, Future }

import akka.grpc.scaladsl
import akka.grpc.scaladsl.{ GrpcExceptionHandler, GrpcMarshalling, ScalapbProtobufSerializer, Metadata, MetadataImpl }
import akka.grpc.{Codecs, GrpcServiceException }
import io.grpc.Status

import akka.http.scaladsl.model.{ HttpRequest, HttpResponse, StatusCodes }
import akka.http.scaladsl.model.Uri.Path
import akka.http.scaladsl.model.Uri.Path.Segment
import akka.actor.ActorSystem
import akka.stream.Materializer


  object GreeterServiceHandler {
    private val notFound = Future.successful(HttpResponse(StatusCodes.NotFound))

    /**
     * Creates a `HttpRequest` to `HttpResponse` handler that can be used in for example `Http().bindAndHandleAsync`
     * for the generated partial function handler and ends with `StatusCodes.NotFound` if the request is not matching.
     *
     * Use `akka.grpc.scaladsl.ServiceHandler.concatOrNotFound` with `GreeterServiceHandler.partial` when combining
     * several services.
     */
    def apply(implementation: GreeterService)(implicit mat: Materializer, system: ActorSystem): HttpRequest => Future[HttpResponse] =
      partial(implementation).orElse { case _ => notFound }

    /**
     * Creates a `HttpRequest` to `HttpResponse` handler that can be used in for example `Http().bindAndHandleAsync`
     * for the generated partial function handler and ends with `StatusCodes.NotFound` if the request is not matching.
     *
     * Use `akka.grpc.scaladsl.ServiceHandler.concatOrNotFound` with `GreeterServiceHandler.partial` when combining
     * several services.
     */
    def apply(implementation: GreeterService, eHandler: ActorSystem => PartialFunction[Throwable, Status])(implicit mat: Materializer, system: ActorSystem): HttpRequest => Future[HttpResponse] =
      partial(implementation, GreeterService.name, eHandler).orElse { case _ => notFound }

    /**
     * Creates a `HttpRequest` to `HttpResponse` handler that can be used in for example `Http().bindAndHandleAsync`
     * for the generated partial function handler and ends with `StatusCodes.NotFound` if the request is not matching.
     *
     * Use `akka.grpc.scaladsl.ServiceHandler.concatOrNotFound` with `GreeterServiceHandler.partial` when combining
     * several services.
     *
     * Registering a gRPC service under a custom prefix is not widely supported and strongly discouraged by the specification.
     */
    def apply(implementation: GreeterService, prefix: String)(implicit mat: Materializer, system: ActorSystem): HttpRequest => Future[HttpResponse] =
      partial(implementation, prefix).orElse { case _ => notFound }

    /**
     * Creates a `HttpRequest` to `HttpResponse` handler that can be used in for example `Http().bindAndHandleAsync`
     * for the generated partial function handler and ends with `StatusCodes.NotFound` if the request is not matching.
     *
     * Use `akka.grpc.scaladsl.ServiceHandler.concatOrNotFound` with `GreeterServiceHandler.partial` when combining
     * several services.
     *
     * Registering a gRPC service under a custom prefix is not widely supported and strongly discouraged by the specification.
     */
    def apply(implementation: GreeterService, prefix: String, eHandler: ActorSystem => PartialFunction[Throwable, Status])(implicit mat: Materializer, system: ActorSystem): HttpRequest => Future[HttpResponse] =
      partial(implementation, prefix, eHandler).orElse { case _ => notFound }

    /**
     * Creates a partial `HttpRequest` to `HttpResponse` handler that can be combined with handlers of other
     * services with `akka.grpc.scaladsl.ServiceHandler.concatOrNotFound` and then used in for example
     * `Http().bindAndHandleAsync`.
     *
     * Use `GreeterServiceHandler.apply` if the server is only handling one service.
     *
     * Registering a gRPC service under a custom prefix is not widely supported and strongly discouraged by the specification.
     */
    def partial(implementation: GreeterService, prefix: String = GreeterService.name, eHandler: ActorSystem => PartialFunction[Throwable, Status] = GrpcExceptionHandler.defaultMapper)(implicit mat: Materializer, system: ActorSystem): PartialFunction[HttpRequest, Future[HttpResponse]] = {
      implicit val ec: ExecutionContext = mat.executionContext
      import GreeterService.Serializers._

      def handle(request: HttpRequest, method: String): Future[HttpResponse] = method match {
        
        case "SayHello" =>
          val responseCodec = Codecs.negotiate(request)
          
          GrpcMarshalling.unmarshal(request)(HelloRequestSerializer, mat)
            .flatMap(implementation.sayHello(_))
            .map(e => GrpcMarshalling.marshal(e, eHandler)(HelloReplySerializer, mat, responseCodec, system))
        
        case m => Future.failed(new NotImplementedError(s"Not implemented: $m"))
      }

      Function.unlift((req: HttpRequest) => req.uri.path match {
        case Path.Slash(Segment(`prefix`, Path.Slash(Segment(method, Path.Empty)))) â‡’
          Some(handle(req, method).recoverWith(GrpcExceptionHandler.default(eHandler(system))))
        case _ =>
          None
      })
    }
  }

